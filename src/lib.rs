mod utils;

use num_complex::Complex64;
use plotters::prelude::*;
use rand::Rng;
use std::f64::consts::PI;
use wasm_bindgen::prelude::*;

#[cfg(feature = "wee_alloc")]
#[global_allocator]
static ALLOC: wee_alloc::WeeAlloc = wee_alloc::WeeAlloc::INIT;

pub fn dft(signal: &[Complex64]) -> Vec<Complex64> {
    let n = signal.len();
    let mut result = vec![Complex64::new(0.0, 0.0); n];
    for j in 0..n {
        for k in 0..n {
            let angle = 2.0 * PI * (j as f64 * k as f64) / (n as f64);
            let c = Complex64::new(angle.cos(), -angle.sin());
            result[j] += signal[k] * c;
        }
    }
    result
}

#[wasm_bindgen]
pub fn dft_real(signal: &[f64]) -> Vec<f64> {
    utils::set_panic_hook();

    let complex_signal = signal
        .iter()
        .map(|x| Complex64::new(*x, 0.0))
        .collect::<Vec<_>>();
    let complex_result = dft(&complex_signal);

    let mut result = vec![0.0; 2 * signal.len()];
    for i in 0..signal.len() {
        result[2 * i] = complex_result[i].re;
        result[2 * i + 1] = complex_result[i].im;
    }
    result
}

pub fn idft(spectrum: &[Complex64]) -> Vec<Complex64> {
    let n = spectrum.len();
    let mut result = vec![Complex64::new(0.0, 0.0); n];
    for j in 0..n {
        for k in 0..n {
            let angle = 2.0 * PI * (j as f64 * k as f64) / (n as f64);
            let c = Complex64::new(angle.cos(), angle.sin());
            result[j] += spectrum[k] * c;
        }
        result[j] /= n as f64;
    }
    result
}

fn random_signal() -> Vec<Complex64> {
    let mut rng = rand::thread_rng();
    let num_samples = 200;
    let mut signal = vec![0.0; num_samples];
    for _ in 0..2 {
        let freq: f64 = rng.gen_range(0.0..10.0);
        let amp: f64 = rng.gen_range(0.0..1.0);
        for i in 0..num_samples {
            signal[i] += amp * f64::sin(2.0 * PI * freq * (i as f64));
        }
    }
    signal.iter().map(|x| Complex64::new(*x, 0.0)).collect()
}

fn plot_signal(signal: &[Complex64]) -> Result<(), Box<dyn std::error::Error>> {
    let root = BitMapBackend::new("signal.png", (640, 640)).into_drawing_area();
    root.fill(&WHITE)?;
    let mut chart =
        ChartBuilder::on(&root).build_cartesian_2d(0.0f64..200f64, -2.0f64..2.0f64)?;

    chart.draw_series(LineSeries::new(
        signal.iter().enumerate().map(|(i, s)| (i as f64, s.re)),
        &RED,
    ))?;

    chart.configure_series_labels().draw()?;
    root.present()?;
    Ok(())
}

#[cfg(test)]
mod tests {
    use super::*;
    use num_complex::Complex64;

    fn compare_vecs(result: &[Complex64], expect: &[Complex64]) {
        let eps = 0.00000001;
        result.iter().zip(expect.iter()).for_each(|(x, y)| {
            assert!((x.re.abs() - y.re.abs()).abs() <= eps);
            assert!((x.im.abs() - y.im.abs()).abs() <= eps);
        });
    }

    #[test]
    fn tmp_2() {
        let signal = random_signal();
        plot_signal(&signal);
    }

    #[test]
    fn simple_dft_test() {
        let f = [
            Complex64::new(1.0, 0.0),
            Complex64::new(2.0, -1.0),
            Complex64::new(0.0, -1.0),
            Complex64::new(-1.0, 2.0),
        ];
        let expect = [
            Complex64::new(2.0, 0.0),
            Complex64::new(-2.0, -2.0),
            Complex64::new(0.0, -2.0),
            Complex64::new(4.0, 4.0),
        ];
        let result = dft(&f);
        compare_vecs(&result, &expect);
    }

    #[test]
    fn dft_test() {
        // test against SciPy https://docs.scipy.org/doc/scipy/tutorial/fft.html
        let f = [
            Complex64::new(1.0, 0.0),
            Complex64::new(2.0, 0.0),
            Complex64::new(1.0, 0.0),
            Complex64::new(-1.0, 0.0),
            Complex64::new(1.5, 0.0),
        ];
        let expect = [
            Complex64::new(4.5, 0.0),
            Complex64::new(2.08155948, -1.65109876),
            Complex64::new(-1.83155948, 1.60822041),
            Complex64::new(-1.83155948, 1.60822041),
            Complex64::new(2.08155948, 1.65109876),
        ];
        let result = dft(&f);
        compare_vecs(&result, &expect);
    }

    #[test]
    fn tmp() {
        let a = [
            0.0,
            -0.6234429521074896,
            -1.1973032875694403,
            -1.6767087863937906,
            -2.0257220679223416,
            -2.2206455819477755,
            -2.2520727431811443,
            -2.125485548933269,
            -1.8603545089712175,
            -1.4878557963668597,
            -1.0474657292348653,
            -0.5828081887691174,
            -0.13720395119402784,
            0.25060547482093676,
            0.5501150839236897,
            0.7417264454559532,
            0.8181774738087622,
            0.7846194280097142,
            0.6573788446788736,
            0.4615848659842605,
            0.2279619050117791,
            -0.01082921160185013,
            -0.22388027328621962,
            -0.3853437689105391,
            -0.47700545401421207,
            -0.48986229943491766,
            -0.4245693499572798,
            -0.2907541123485041,
            -0.10532872649255406,
            0.1099569155005975,
            0.3313965976295503,
            0.5362784405888507,
            0.7055432592280513,
            0.8258361918696858,
            0.8907212383739141,
            0.9009386607998253,
            0.8637080629277676,
            0.791200301427005,
            0.6984045619354821,
            0.6006905106142101,
            0.511400617403715,
            0.4398004479212524,
            0.38966601432199477,
            0.35870327008941805,
            0.338885930576537,
            0.3176774439707774,
            0.2799860000288334,
            0.21060246483149253,
            0.09680248478398673,
            -0.06923547664258145,
            -0.2885305924455386,
            -0.5541970140393684,
            -0.8513244650457608,
            -1.157911028635949,
            -1.4467880781638054,
            -1.6883521349398385,
            -1.8538122597255984,
            -1.918587524161844,
            -1.8654566829364478,
            -1.6870761195905288,
            -1.3875418200982845,
            -0.9827705097246235,
            -0.4996033995472801,
            0.02632108494194557,
            0.5537379164099497,
            1.0396583599453249,
            1.4436031077083016,
            1.7317160005135772,
            1.8803105988376927,
            1.878453900893822,
            1.729288559952191,
            1.4499267640761828,
            1.0699012052454628,
            0.6283145285326983,
            0.16997099403051488,
            -0.2591131295698249,
            -0.6163534289046847,
            -0.8669083478675504,
            -0.9872029900929478,
            -0.9672936801353972,
            -0.8118241509425437,
            -0.5394743136613378,
            -0.18096336418523648,
            0.22417716932610582,
            0.6317148012965155,
            0.9972742248371136,
            1.2808604598358875,
            1.4508736781368126,
            1.4872020001056296,
            1.3830824299542588,
            1.1455563719363884,
            0.7944994913213281,
            0.3603589351829179,
            -0.11913283323963897,
            -0.6028939650559614,
            -1.0506439196949846,
            -1.4268216829796585,
            -1.7038617172121948,
            -1.8644999127738462,
            -1.902898439066958,
            -1.8245157641648362,
            -1.6447902506622574,
            -1.386836365489097,
            -1.0784569641930155,
            -0.7488418743903992,
            -0.425345189563751,
            -0.1307096527009931,
            0.11895997462285746,
            0.31527292795141226,
            0.45759775306814465,
            0.5521248158514196,
            0.6101129484100434,
            0.6455831360516298,
            0.6727838317749433,
            0.7037729018314702,
            0.7464383979343617,
            0.8032175818339775,
            0.8706789618658585,
            0.9400174194005912,
            0.9983920640680191,
            1.0309251790346994,
            1.0230922881318913,
            0.9631789928417802,
            0.8444666726138863,
            0.6668383501031884,
            0.43756472906220334,
            0.17113052480948088,
            -0.11191924703808642,
            -0.38700881886365296,
            -0.6282185144660427,
            -0.8113203476743296,
            -0.9167995589129844,
            -0.9324879580599964,
            -0.8554687897357052,
            -0.6929886883692911,
            -0.46222194223978696,
            -0.18886340186703965,
            0.09533611719602028,
            0.3558502325997133,
            0.5591284782131216,
            0.6764085096709221,
            0.6871587622458508,
            0.5817503207568162,
            0.3630323247717341,
            0.0465995343030049,
            -0.3403186272838837,
            -0.7612666884195727,
            -1.1740431040335315,
            -1.534902454763008,
            -1.8030446078014437,
            -1.9449162716119837,
            -1.9378628315041766,
            -1.7727317296702654,
            -1.4551363958148027,
            -1.0052302756172136,
            -0.45599854333882367,
            0.14976670583728335,
            0.7635010227984931,
            1.3354969937748813,
            1.8196500570360332,
            2.1778305847531394,
            2.383433224170604,
            2.423743933368807,
            2.300892890166309,
            2.031313302973951,
            1.6437853057931504,
            1.1762930569495773,
            0.67204561582607,
            0.1750949472954456,
            -0.2739811643743592,
            -0.6418806118658944,
            -0.9054782263794351,
            -1.0535490809311892,
            -1.0871713830173642,
            -1.0188145607205439,
            -0.8702621912860258,
            -0.6696433463453879,
            -0.44793613972348745,
            -0.23535420586515787,
            -0.05802603657197791,
            0.06467037568417766,
            0.1218428873939068,
            0.11173290819919707,
            0.04125002210473119,
            -0.07550028605896497,
            -0.21947396557205395,
            -0.36942260106226643,
            -0.5047488725809123,
            -0.6081241373115104,
            -0.6675490160617396,
            -0.677615929180177,
            -0.6398386414799512,
            -0.562034799081332,
            -0.4568682694751154,
            -0.33976405524355985,
            -0.22648676076930496,
            -0.1307145956855974,
            -0.061939793427667644,
            -0.02398333060853164,
            -0.014332271698752397,
            -0.024401709671944216,
            -0.04070319035115055,
            -0.046782483806614865,
            -0.025686340072303415,
            0.0373566411445031,
            0.15239214730876505,
            0.3226774187945902,
            0.5433937079639464,
            0.8013402677240911,
            1.075700800717148,
            1.3398436714157933,
            1.5639886792129332,
            1.7184612559802286,
            1.7771733017010067,
            1.7209288536202836,
            1.540158118772736,
            1.2367354539587572,
            0.8246305561553218,
            0.3292673999580572,
            -0.21439153147938034,
            -0.764873555013983,
            -1.2780447920409825,
            -1.7113883723651775,
            -2.0282625650868695,
            -2.2016809000970614,
            -2.217198531593919,
            -2.074578129708824,
            -1.7880351219543578,
            -1.3850124732460407,
            -0.9035929152557319,
            -0.3888041744605181,
            0.11180613292607167,
            0.5528682471743124,
            0.8956712037701271,
            1.1119587468609047,
            1.186644052378826,
            1.1191621491967432,
            0.9233243734049796,
            0.6256990484128214,
            0.2626992863672865,
            -0.12330482509440194,
            -0.4884312222170742,
            -0.7918145624901136,
            -0.9997419024352954,
            -1.0889671698030308,
            -1.0488707112111455,
            -0.8822597055501106,
            -0.6047550821684367,
            -0.24286394097626415,
            0.16902370469302216,
            0.5923640852081835,
            0.9884947702753331,
            1.322533492334609,
            1.5667258296492406,
            1.7028998378123879,
            1.7237951927808457,
            1.6331672831316961,
            1.4447073751440302,
            1.1799522305794818,
            0.8654653684752497,
            0.529645458397593,
            0.19954735006736368,
            -0.1019146227649379,
            -0.3580703828656976,
            -0.5596884515287083,
            -0.7051621190692898,
            -0.7997153151214176,
            -0.8537763345639526,
            -0.8807671095393506,
            -0.894622754351605,
            -0.9073829168630952,
            -0.92718022678642,
            -0.956894235781466,
            -0.9936490004380337,
            -1.0292201833893988,
            -1.0512972002409784,
            -1.0454324440765128,
            -0.9974170672068137,
            -0.895762757116036,
            -0.7339490531716171,
            -0.5121188018142416,
            -0.23796792087002994,
            0.07332762652131397,
            0.4001863174760738,
            0.7166097561817636,
            0.9948801518774664,
            1.208665327533317,
            1.3361684897077055,
            1.3629409182015784,
            1.2840022479008892,
            1.1049828874063148,
            0.842108947801071,
            0.5209800742437132,
            0.1742299825801943,
            -0.16170783516597798,
            -0.4503964656105166,
            -0.6593465175425237,
            -0.7636844167279865,
            -0.7491202628692128,
            -0.6138647994855589,
        ]
        .iter()
        .map(|x| Complex64::new(*x, 0.0))
        .collect::<Vec<_>>();

        let f = dft(&a);
        println!("{:?}", f.iter().map(|x| x.re).collect::<Vec<_>>());
    }
}
